import rclpy
from ros.px4_reader import PX4Reader
import time

def main():
    rclpy.init()
    reader = PX4Reader()
    
    try:
        # Ожидаем первое сообщение
        start_time = time.time()
        timeout = 25.0  # Максимальное время ожидания в секундах
        
        while rclpy.ok() and time.time() - start_time < timeout:
            # Проверяем получение данных
            if reader.vehicle_status is not None:
                print("\nVehicle Status:")
                print(f"Vehicle Type: {reader.vehicle_status.gcs_connection_lost}")
                print(f"Timestamp: {reader.vehicle_status.timestamp}")
                print(f"Armed Time: {reader.vehicle_status.armed_time}")
                print(f"Takeoff Time: {reader.vehicle_status.takeoff_time}")
                print(f"Arming State: {reader.vehicle_status.arming_state}")
                print(f"Latest Arming Reason: {reader.vehicle_status.latest_arming_reason}")
                print(f"Latest Disarming Reason: {reader.vehicle_status.latest_disarming_reason}")
                print(f"Nav State Timestamp: {reader.vehicle_status.nav_state_timestamp}")
                print(f"Nav State User Intention: {reader.vehicle_status.nav_state_user_intention}")
                print(f"Nav State: {reader.vehicle_status.nav_state}")
                print(f"Executor In Charge: {reader.vehicle_status.executor_in_charge}")
                print(f"Valid Nav States Mask: {reader.vehicle_status.valid_nav_states_mask}")
                print(f"Can Set Nav States Mask: {reader.vehicle_status.can_set_nav_states_mask}")
                print(f"Failure Detector Status: {reader.vehicle_status.failure_detector_status}")
                print(f"HIL State: {reader.vehicle_status.hil_state}")
                print(f"Vehicle Type: {reader.vehicle_status.vehicle_type}")
                print(f"Failsafe: {reader.vehicle_status.failsafe}")
                print(f"Failsafe and User Took Over: {reader.vehicle_status.failsafe_and_user_took_over}")
                print(f"Failsafe Defer State: {reader.vehicle_status.failsafe_defer_state}")
                print(f"GCS Connection Lost: {reader.vehicle_status.gcs_connection_lost}")
                print(f"GCS Connection Lost Counter: {reader.vehicle_status.gcs_connection_lost_counter}")
                print(f"High Latency Data Link Lost: {reader.vehicle_status.high_latency_data_link_lost}")
                print(f"Is VTOL: {reader.vehicle_status.is_vtol}")
                print(f"Is VTOL Tailsitter: {reader.vehicle_status.is_vtol_tailsitter}")
                print(f"In Transition Mode: {reader.vehicle_status.in_transition_mode}")
                print(f"In Transition to FW: {reader.vehicle_status.in_transition_to_fw}")
                print(f"System Type: {reader.vehicle_status.system_type}")
                print(f"System ID: {reader.vehicle_status.system_id}")
                print(f"Component ID: {reader.vehicle_status.component_id}")
                print(f"Safety Button Available: {reader.vehicle_status.safety_button_available}")
                print(f"Safety Off: {reader.vehicle_status.safety_off}")
                print(f"Power Input Valid: {reader.vehicle_status.power_input_valid}")
                print(f"USB Connected: {reader.vehicle_status.usb_connected}")
                print(f"Open Drone ID System Present: {reader.vehicle_status.open_drone_id_system_present}")
                print(f"Open Drone ID System Healthy: {reader.vehicle_status.open_drone_id_system_healthy}")
                print(f"Parachute System Present: {reader.vehicle_status.parachute_system_present}")
                print(f"Parachute System Healthy: {reader.vehicle_status.parachute_system_healthy}")
                print(f"Avoidance System Required: {reader.vehicle_status.avoidance_system_required}")
                print(f"Avoidance System Valid: {reader.vehicle_status.avoidance_system_valid}")
                print(f"RC Calibration in Progress: {reader.vehicle_status.rc_calibration_in_progress}")
                print(f"Calibration Enabled: {reader.vehicle_status.calibration_enabled}")
                print(f"Pre-Flight Checks Pass: {reader.vehicle_status.pre_flight_checks_pass}")
                print(f"Battery1: {reader.battery_status.remaining * 100:.1f}%")
                print("\nVehicle Odometry:")
                print(f"Timestamp: {reader.vehicle_odometry.timestamp}")
                print(f"Timestamp Sample: {reader.vehicle_odometry.timestamp_sample}")
                print(f"Pose Frame: {reader.vehicle_odometry.pose_frame}")
                print(f"Position: {reader.vehicle_odometry.position}")
                print(f"Quaternion (q): {reader.vehicle_odometry.q}")
                print(f"Velocity Frame: {reader.vehicle_odometry.velocity_frame}")
                print(f"Velocity: {reader.vehicle_odometry.velocity}")
                print(f"Angular Velocity: {reader.vehicle_odometry.angular_velocity}")
                print(f"Position Variance: {reader.vehicle_odometry.position_variance}")
                print(f"Orientation Variance: {reader.vehicle_odometry.orientation_variance}")
                print(f"Velocity Variance: {reader.vehicle_odometry.velocity_variance}")
                print(f"Reset Counter: {reader.vehicle_odometry.reset_counter}")
                print(f"Quality: {reader.vehicle_odometry.quality}")

                print("\nVehicle Local Position:")
                print(f"Timestamp: {reader.vehicle_local_position.timestamp}")
                print(f"Timestamp Sample: {reader.vehicle_local_position.timestamp_sample}")
                print(f"XY Valid: {reader.vehicle_local_position.xy_valid}")
                print(f"Z Valid: {reader.vehicle_local_position.z_valid}")
                print(f"V_XY Valid: {reader.vehicle_local_position.v_xy_valid}")
                print(f"V_Z Valid: {reader.vehicle_local_position.v_z_valid}")
                print(f"X: {reader.vehicle_local_position.x}")
                print(f"Y: {reader.vehicle_local_position.y}")
                print(f"Z: {reader.vehicle_local_position.z}")
                print(f"Delta XY: {reader.vehicle_local_position.delta_xy}")
                print(f"XY Reset Counter: {reader.vehicle_local_position.xy_reset_counter}")
                print(f"Delta Z: {reader.vehicle_local_position.delta_z}")
                print(f"Z Reset Counter: {reader.vehicle_local_position.z_reset_counter}")
                print(f"VX: {reader.vehicle_local_position.vx}")
                print(f"VY: {reader.vehicle_local_position.vy}")
                print(f"VZ: {reader.vehicle_local_position.vz}")
                print(f"Z Deriv: {reader.vehicle_local_position.z_deriv}")
                print(f"Delta VXY: {reader.vehicle_local_position.delta_vxy}")
                print(f"VXY Reset Counter: {reader.vehicle_local_position.vxy_reset_counter}")
                print(f"Delta VZ: {reader.vehicle_local_position.delta_vz}")
                print(f"VZ Reset Counter: {reader.vehicle_local_position.vz_reset_counter}")
                print(f"AX: {reader.vehicle_local_position.ax}")
                print(f"AY: {reader.vehicle_local_position.ay}")
                print(f"AZ: {reader.vehicle_local_position.az}")
                print(f"Heading: {reader.vehicle_local_position.heading}")
                print(f"Heading Variance: {reader.vehicle_local_position.heading_var}")
                print(f"Unaided Heading: {reader.vehicle_local_position.unaided_heading}")
                print(f"Delta Heading: {reader.vehicle_local_position.delta_heading}")
                print(f"Heading Reset Counter: {reader.vehicle_local_position.heading_reset_counter}")
                print(f"Heading Good for Control: {reader.vehicle_local_position.heading_good_for_control}")
                print(f"Tilt Variance: {reader.vehicle_local_position.tilt_var}")
                print(f"XY Global: {reader.vehicle_local_position.xy_global}")
                print(f"Z Global: {reader.vehicle_local_position.z_global}")
                print(f"Reference Timestamp: {reader.vehicle_local_position.ref_timestamp}")
                print(f"Reference Latitude: {reader.vehicle_local_position.ref_lat}")
                print(f"Reference Longitude: {reader.vehicle_local_position.ref_lon}")
                print(f"Reference Altitude: {reader.vehicle_local_position.ref_alt}")
                print(f"Distance Bottom Valid: {reader.vehicle_local_position.dist_bottom_valid}")
                print(f"Distance Bottom: {reader.vehicle_local_position.dist_bottom}")
                print(f"Distance Bottom Variance: {reader.vehicle_local_position.dist_bottom_var}")
                print(f"Delta Distance Bottom: {reader.vehicle_local_position.delta_dist_bottom}")
                print(f"Distance Bottom Reset Counter: {reader.vehicle_local_position.dist_bottom_reset_counter}")
                print(f"Distance Bottom Sensor Bitfield: {reader.vehicle_local_position.dist_bottom_sensor_bitfield}")
                print(f"EPH: {reader.vehicle_local_position.eph}")
                print(f"EPV: {reader.vehicle_local_position.epv}")
                print(f"EVH: {reader.vehicle_local_position.evh}")
                print(f"EVV: {reader.vehicle_local_position.evv}")
                print(f"Dead Reckoning: {reader.vehicle_local_position.dead_reckoning}")
                print(f"VXY Max: {reader.vehicle_local_position.vxy_max}")
                print(f"VZ Max: {reader.vehicle_local_position.vz_max}")
                print(f"HAGL Min: {reader.vehicle_local_position.hagl_min}")
                print(f"HAGL Max: {reader.vehicle_local_position.hagl_max}")

                # print("\nVehicle Land Detected:")
                # print(f"Timestamp: {reader.vehicle_land_detected.timestamp}")
                # print(f"Freefall: {reader.vehicle_land_detected.freefall}")
                # print(f"Ground Contact: {reader.vehicle_land_detected.ground_contact}")
                # print(f"Maybe Landed: {reader.vehicle_land_detected.maybe_landed}")
                # print(f"Landed: {reader.vehicle_land_detected.landed}")
                # print(f"In Ground Effect: {reader.vehicle_land_detected.in_ground_effect}")
                # print(f"In Descend: {reader.vehicle_land_detected.in_descend}")
                # print(f"Has Low Throttle: {reader.vehicle_land_detected.has_low_throttle}")
                # print(f"Vertical Movement: {reader.vehicle_land_detected.vertical_movement}")
                # print(f"Horizontal Movement: {reader.vehicle_land_detected.horizontal_movement}")
                # print(f"Rotational Movement: {reader.vehicle_land_detected.rotational_movement}")
                # print(f"Close to Ground or Skipped Check: {reader.vehicle_land_detected.close_to_ground_or_skipped_check}")
                # print(f"At Rest: {reader.vehicle_land_detected.at_rest}")

                print("\nVehicle Global Position:")
                print(f"Timestamp: {reader.vehicle_global_position.timestamp}")
                print(f"Latitude: {reader.vehicle_global_position.lat}")
                print(f"Longitude: {reader.vehicle_global_position.lon}")
                print(f"Altitude: {reader.vehicle_global_position.alt}")
                print(f"Altitude (Ellipsoid): {reader.vehicle_global_position.alt_ellipsoid}")
                print(f"Latitude/Longitude Valid: {reader.vehicle_global_position.lat_lon_valid}")
                print(f"Altitude Valid: {reader.vehicle_global_position.alt_valid}")
                print(f"Delta Altitude: {reader.vehicle_global_position.delta_alt}")
                print(f"Delta Terrain: {reader.vehicle_global_position.delta_terrain}")
                print(f"Latitude/Longitude Reset Counter: {reader.vehicle_global_position.lat_lon_reset_counter}")
                print(f"Altitude Reset Counter: {reader.vehicle_global_position.alt_reset_counter}")
                print(f"Terrain Reset Counter: {reader.vehicle_global_position.terrain_reset_counter}")
                print(f"EPH (Horizontal Position Error): {reader.vehicle_global_position.eph}")
                print(f"EPV (Vertical Position Error): {reader.vehicle_global_position.epv}")
                print(f"Terrain Altitude: {reader.vehicle_global_position.terrain_alt}")
                print(f"Terrain Altitude Valid: {reader.vehicle_global_position.terrain_alt_valid}")
                print(f"Dead Reckoning: {reader.vehicle_global_position.dead_reckoning}")


                # print("\nVehicle Control Mode:")
                # print(f"Timestamp: {reader.vehicle_control_mode.timestamp}")
                # print(f"Armed: {reader.vehicle_control_mode.flag_armed}")
                # print(f"Multicopter Position Control Enabled: {reader.vehicle_control_mode.flag_multicopter_position_control_enabled}")
                # print(f"Manual Control Enabled: {reader.vehicle_control_mode.flag_control_manual_enabled}")
                # print(f"Auto Control Enabled: {reader.vehicle_control_mode.flag_control_auto_enabled}")
                # print(f"Offboard Control Enabled: {reader.vehicle_control_mode.flag_control_offboard_enabled}")
                # print(f"Position Control Enabled: {reader.vehicle_control_mode.flag_control_position_enabled}")
                # print(f"Velocity Control Enabled: {reader.vehicle_control_mode.flag_control_velocity_enabled}")
                # print(f"Altitude Control Enabled: {reader.vehicle_control_mode.flag_control_altitude_enabled}")
                # print(f"Climb Rate Control Enabled: {reader.vehicle_control_mode.flag_control_climb_rate_enabled}")
                # print(f"Acceleration Control Enabled: {reader.vehicle_control_mode.flag_control_acceleration_enabled}")
                # print(f"Attitude Control Enabled: {reader.vehicle_control_mode.flag_control_attitude_enabled}")
                # print(f"Rates Control Enabled: {reader.vehicle_control_mode.flag_control_rates_enabled}")
                # print(f"Allocation Control Enabled: {reader.vehicle_control_mode.flag_control_allocation_enabled}")
                # print(f"Termination Control Enabled: {reader.vehicle_control_mode.flag_control_termination_enabled}")
                # print(f"Source ID: {reader.vehicle_control_mode.source_id}")

                print("\nVehicle Attitude:")
                print(f"Timestamp: {reader.vehicle_attitude.timestamp}")
                print(f"Timestamp Sample: {reader.vehicle_attitude.timestamp_sample}")
                print(f"Quaternion (q): {reader.vehicle_attitude.q}")
                print(f"Delta Quaternion Reset: {reader.vehicle_attitude.delta_q_reset}")
                print(f"Quaternion Reset Counter: {reader.vehicle_attitude.quat_reset_counter}")

                print("\nSensor Combined:")
                print(f"Timestamp: {reader.sensor_combined.timestamp}")
                print(f"Gyro (rad/s): X: {reader.sensor_combined.gyro_rad[0]}, Y: {reader.sensor_combined.gyro_rad[1]}, Z: {reader.sensor_combined.gyro_rad[2]}")
                print(f"Gyro Integral DT: {reader.sensor_combined.gyro_integral_dt}")
                print(f"Accelerometer Timestamp Relative: {reader.sensor_combined.accelerometer_timestamp_relative}")
                print(f"Accelerometer (m/s²): X: {reader.sensor_combined.accelerometer_m_s2[0]}, Y: {reader.sensor_combined.accelerometer_m_s2[1]}, Z: {reader.sensor_combined.accelerometer_m_s2[2]}")
                print(f"Accelerometer Integral DT: {reader.sensor_combined.accelerometer_integral_dt}")
                print(f"Accelerometer Clipping: {reader.sensor_combined.accelerometer_clipping}")
                print(f"Gyro Clipping: {reader.sensor_combined.gyro_clipping}")
                print(f"Accelerometer Calibration Count: {reader.sensor_combined.accel_calibration_count}")
                print(f"Gyro Calibration Count: {reader.sensor_combined.gyro_calibration_count}")

                print("\nPosition Setpoint Triplet:")
                print(f"Timestamp: {reader.position_setpoint_triplet.timestamp}")

                # Предыдущая точка маршрута
                print("\n[Previous Setpoint]")
                print(f"Valid: {reader.position_setpoint_triplet.previous.valid}")
                print(f"Type: {reader.position_setpoint_triplet.previous.type}")
                print(f"Latitude: {reader.position_setpoint_triplet.previous.lat}")
                print(f"Longitude: {reader.position_setpoint_triplet.previous.lon}")
                print(f"Altitude: {reader.position_setpoint_triplet.previous.alt}")
                print(f"Velocity (m/s): X: {reader.position_setpoint_triplet.previous.vx}, Y: {reader.position_setpoint_triplet.previous.vy}, Z: {reader.position_setpoint_triplet.previous.vz}")
                print(f"Yaw: {reader.position_setpoint_triplet.previous.yaw}")
                print(f"Loiter Radius: {reader.position_setpoint_triplet.previous.loiter_radius}")
                print(f"Acceptance Radius: {reader.position_setpoint_triplet.previous.acceptance_radius}")
                print(f"Cruising Speed: {reader.position_setpoint_triplet.previous.cruising_speed}")

                # Текущая точка маршрута
                print("\n[Current Setpoint]")
                print(f"Valid: {reader.position_setpoint_triplet.current.valid}")
                print(f"Type: {reader.position_setpoint_triplet.current.type}")
                print(f"Latitude: {reader.position_setpoint_triplet.current.lat}")
                print(f"Longitude: {reader.position_setpoint_triplet.current.lon}")
                print(f"Altitude: {reader.position_setpoint_triplet.current.alt}")
                print(f"Velocity (m/s): X: {reader.position_setpoint_triplet.current.vx}, Y: {reader.position_setpoint_triplet.current.vy}, Z: {reader.position_setpoint_triplet.current.vz}")
                print(f"Yaw: {reader.position_setpoint_triplet.current.yaw}")
                print(f"Loiter Radius: {reader.position_setpoint_triplet.current.loiter_radius}")
                print(f"Acceptance Radius: {reader.position_setpoint_triplet.current.acceptance_radius}")
                print(f"Cruising Speed: {reader.position_setpoint_triplet.current.cruising_speed}")

                # Следующая точка маршрута
                print("\n[Next Setpoint]")
                print(f"Valid: {reader.position_setpoint_triplet.next.valid}")
                print(f"Type: {reader.position_setpoint_triplet.next.type}")
                print(f"Latitude: {reader.position_setpoint_triplet.next.lat}")
                print(f"Longitude: {reader.position_setpoint_triplet.next.lon}")
                print(f"Altitude: {reader.position_setpoint_triplet.next.alt}")
                print(f"Velocity (m/s): X: {reader.position_setpoint_triplet.next.vx}, Y: {reader.position_setpoint_triplet.next.vy}, Z: {reader.position_setpoint_triplet.next.vz}")
                print(f"Yaw: {reader.position_setpoint_triplet.next.yaw}")
                print(f"Loiter Radius: {reader.position_setpoint_triplet.next.loiter_radius}")
                print(f"Acceptance Radius: {reader.position_setpoint_triplet.next.acceptance_radius}")
                print(f"Cruising Speed: {reader.position_setpoint_triplet.next.cruising_speed}")


                # print("\nFailsafe Flags:")
                # print(f"Timestamp: {reader.failsafe_flags.timestamp}")
# 
                # Требуемые режимы для работы
                # print("\n[Required Modes]")
                # print(f"Angular Velocity Mode: {reader.failsafe_flags.mode_req_angular_velocity}")
                # print(f"Attitude Mode: {reader.failsafe_flags.mode_req_attitude}")
                # print(f"Local Altitude Mode: {reader.failsafe_flags.mode_req_local_alt}")
                # print(f"Local Position Mode: {reader.failsafe_flags.mode_req_local_position}")
                # print(f"Local Position Relaxed Mode: {reader.failsafe_flags.mode_req_local_position_relaxed}")
                # print(f"Global Position Mode: {reader.failsafe_flags.mode_req_global_position}")
                # print(f"Mission Mode: {reader.failsafe_flags.mode_req_mission}")
                # print(f"Offboard Signal Mode: {reader.failsafe_flags.mode_req_offboard_signal}")
                # print(f"Home Position Mode: {reader.failsafe_flags.mode_req_home_position}")
                # print(f"Wind & Flight Time Compliance Mode: {reader.failsafe_flags.mode_req_wind_and_flight_time_compliance}")
                # print(f"Prevent Arming Mode: {reader.failsafe_flags.mode_req_prevent_arming}")
                # print(f"Manual Control Mode: {reader.failsafe_flags.mode_req_manual_control}")
                # print(f"Other Mode Requirements: {reader.failsafe_flags.mode_req_other}")
# 
                # Флаги аварийного состояния
                # print("\n[Failsafe Conditions]")
                # print(f"Angular Velocity Invalid: {reader.failsafe_flags.angular_velocity_invalid}")
                # print(f"Attitude Invalid: {reader.failsafe_flags.attitude_invalid}")
                # print(f"Local Altitude Invalid: {reader.failsafe_flags.local_altitude_invalid}")
                # print(f"Local Position Invalid: {reader.failsafe_flags.local_position_invalid}")
                # print(f"Local Position Relaxed Invalid: {reader.failsafe_flags.local_position_invalid_relaxed}")
                # print(f"Local Velocity Invalid: {reader.failsafe_flags.local_velocity_invalid}")
                # print(f"Global Position Invalid: {reader.failsafe_flags.global_position_invalid}")
                # print(f"Auto Mission Missing: {reader.failsafe_flags.auto_mission_missing}")
                # print(f"Offboard Control Signal Lost: {reader.failsafe_flags.offboard_control_signal_lost}")
                # print(f"Home Position Invalid: {reader.failsafe_flags.home_position_invalid}")
                # print(f"Manual Control Signal Lost: {reader.failsafe_flags.manual_control_signal_lost}")
                # print(f"GCS Connection Lost: {reader.failsafe_flags.gcs_connection_lost}")
# 
                # Флаги системы безопасности
                # print("\n[Safety & System Health]")
                # print(f"Battery Warning Level: {reader.failsafe_flags.battery_warning}")
                # print(f"Battery Low Remaining Time: {reader.failsafe_flags.battery_low_remaining_time}")
                # print(f"Battery Unhealthy: {reader.failsafe_flags.battery_unhealthy}")
                # print(f"Geofence Breached: {reader.failsafe_flags.geofence_breached}")
                # print(f"Mission Failure: {reader.failsafe_flags.mission_failure}")
                # print(f"VTOL Fixed-Wing System Failure: {reader.failsafe_flags.vtol_fixed_wing_system_failure}")
                # print(f"Wind Limit Exceeded: {reader.failsafe_flags.wind_limit_exceeded}")
                # print(f"Flight Time Limit Exceeded: {reader.failsafe_flags.flight_time_limit_exceeded}")
                # print(f"Local Position Accuracy Low: {reader.failsafe_flags.local_position_accuracy_low}")
                # print(f"Navigator Failure: {reader.failsafe_flags.navigator_failure}")
# 
                # Физические неисправности
                # print("\n[Hardware Failures]")
                # print(f"Critical Failure Detected: {reader.failsafe_flags.fd_critical_failure}")
                # print(f"ESC Arming Failure: {reader.failsafe_flags.fd_esc_arming_failure}")
                # print(f"Imbalanced Propeller Detected: {reader.failsafe_flags.fd_imbalanced_prop}")
                # print(f"Motor Failure: {reader.failsafe_flags.fd_motor_failure}")

                

                #print("\nEstimator Status Flags:")
                #print(f"Timestamp: {reader.estimator_status_flags.timestamp}")
                #print(f"Timestamp Sample: {reader.estimator_status_flags.timestamp_sample}")
                #print(f"Control Status Changes: {reader.estimator_status_flags.control_status_changes}")
            #
                ## Флаги состояния контроля (определение, какие датчики и методы используются)
                #print("\n[Control Status Flags]")
                #print(f"Tilt Alignment: {reader.estimator_status_flags.cs_tilt_align}")
                #print(f"Yaw Alignment: {reader.estimator_status_flags.cs_yaw_align}")
                #print(f"GPS: {reader.estimator_status_flags.cs_gps}")
                #print(f"Optical Flow: {reader.estimator_status_flags.cs_opt_flow}")
                #print(f"Magnetic Heading: {reader.estimator_status_flags.cs_mag_hdg}")
                #print(f"3D Magnetometer: {reader.estimator_status_flags.cs_mag_3d}")
                #print(f"Magnetic Declination: {reader.estimator_status_flags.cs_mag_dec}")
                #print(f"In Air: {reader.estimator_status_flags.cs_in_air}")
                #print(f"Wind Estimation: {reader.estimator_status_flags.cs_wind}")
                #print(f"Barometric Altitude: {reader.estimator_status_flags.cs_baro_hgt}")
                #print(f"Rangefinder Height: {reader.estimator_status_flags.cs_rng_hgt}")
                #print(f"GPS Height: {reader.estimator_status_flags.cs_gps_hgt}")
                #print(f"External Vision Position: {reader.estimator_status_flags.cs_ev_pos}")
                #print(f"External Vision Yaw: {reader.estimator_status_flags.cs_ev_yaw}")
                #print(f"External Vision Height: {reader.estimator_status_flags.cs_ev_hgt}")
                #print(f"Beta Fusion: {reader.estimator_status_flags.cs_fuse_beta}")
                #print(f"Magnetic Field Disturbed: {reader.estimator_status_flags.cs_mag_field_disturbed}")
                #print(f"Fixed-Wing Mode: {reader.estimator_status_flags.cs_fixed_wing}")
                #print(f"Magnetic Fault Detected: {reader.estimator_status_flags.cs_mag_fault}")
                #print(f"Airspeed Fusion: {reader.estimator_status_flags.cs_fuse_aspd}")
                #print(f"Ground Effect Detected: {reader.estimator_status_flags.cs_gnd_effect}")
                #print(f"Rangefinder Stuck: {reader.estimator_status_flags.cs_rng_stuck}")
                #print(f"GNSS Yaw Available: {reader.estimator_status_flags.cs_gnss_yaw}")
                #print(f"Magnetic Alignment in Flight: {reader.estimator_status_flags.cs_mag_aligned_in_flight}")
                #print(f"External Velocity Available: {reader.estimator_status_flags.cs_ev_vel}")
                #print(f"Synthetic Magnetic Z Axis: {reader.estimator_status_flags.cs_synthetic_mag_z}")
                #print(f"Vehicle at Rest: {reader.estimator_status_flags.cs_vehicle_at_rest}")
                #print(f"GNSS Yaw Fault Detected: {reader.estimator_status_flags.cs_gnss_yaw_fault}")
                #print(f"Rangefinder Fault Detected: {reader.estimator_status_flags.cs_rng_fault}")
                #print(f"Inertial Dead Reckoning: {reader.estimator_status_flags.cs_inertial_dead_reckoning}")
                #print(f"Wind Dead Reckoning: {reader.estimator_status_flags.cs_wind_dead_reckoning}")
                #print(f"Rangefinder Kinematic Consistency: {reader.estimator_status_flags.cs_rng_kin_consistent}")
                #print(f"Fake Position Mode: {reader.estimator_status_flags.cs_fake_pos}")
                #print(f"Fake Height Mode: {reader.estimator_status_flags.cs_fake_hgt}")
                #print(f"Gravity Vector Estimation: {reader.estimator_status_flags.cs_gravity_vector}")
                #print(f"Magnetometer Active: {reader.estimator_status_flags.cs_mag}")
                #print(f"External Yaw Fault: {reader.estimator_status_flags.cs_ev_yaw_fault}")
                #print(f"Magnetic Heading Consistency: {reader.estimator_status_flags.cs_mag_heading_consistent}")
                #print(f"Auxiliary Global Position: {reader.estimator_status_flags.cs_aux_gpos}")
                #print(f"Rangefinder Terrain Mode: {reader.estimator_status_flags.cs_rng_terrain}")
                #print(f"Optical Flow Terrain Mode: {reader.estimator_status_flags.cs_opt_flow_terrain}")
                #print(f"Valid Fake Position: {reader.estimator_status_flags.cs_valid_fake_pos}")
                #print(f"Constant Position Mode: {reader.estimator_status_flags.cs_constant_pos}")
            #
                ## Флаги неисправностей датчиков
                # print("\n[Sensor Faults]")
                # print(f"Magnetometer X Fault: {reader.estimator_status_flags.fs_bad_mag_x}")
                # print(f"Magnetometer Y Fault: {reader.estimator_status_flags.fs_bad_mag_y}")
                # print(f"Magnetometer Z Fault: {reader.estimator_status_flags.fs_bad_mag_z}")
                # print(f"Heading Fault: {reader.estimator_status_flags.fs_bad_hdg}")
                # print(f"Magnetic Declination Fault: {reader.estimator_status_flags.fs_bad_mag_decl}")
                # print(f"Airspeed Fault: {reader.estimator_status_flags.fs_bad_airspeed}")
                # print(f"Sideslip Fault: {reader.estimator_status_flags.fs_bad_sideslip}")
                # print(f"Optical Flow X Fault: {reader.estimator_status_flags.fs_bad_optflow_x}")
                # print(f"Optical Flow Y Fault: {reader.estimator_status_flags.fs_bad_optflow_y}")
                # print(f"Vertical Acceleration Fault: {reader.estimator_status_flags.fs_bad_acc_vertical}")
                # print(f"Accelerometer Clipping: {reader.estimator_status_flags.fs_bad_acc_clipping}")
            #
                ## Флаги отказов инновационного фильтра
                #print("\n[Innovation Faults]")
                #print(f"Reject Horizontal Velocity: {reader.estimator_status_flags.reject_hor_vel}")
                #print(f"Reject Vertical Velocity: {reader.estimator_status_flags.reject_ver_vel}")
                #print(f"Reject Horizontal Position: {reader.estimator_status_flags.reject_hor_pos}")
                #print(f"Reject Vertical Position: {reader.estimator_status_flags.reject_ver_pos}")
                #print(f"Reject Yaw Estimate: {reader.estimator_status_flags.reject_yaw}")
                #print(f"Reject Airspeed Estimate: {reader.estimator_status_flags.reject_airspeed}")
                #print(f"Reject Sideslip Estimate: {reader.estimator_status_flags.reject_sideslip}")
                #print(f"Reject Height Above Ground Level: {reader.estimator_status_flags.reject_hagl}")
                #print(f"Reject Optical Flow X: {reader.estimator_status_flags.reject_optflow_x}")
                #print(f"Reject Optical Flow Y: {reader.estimator_status_flags.reject_optflow_y}")
                break
            
            # Обрабатываем сообщения один раз
            rclpy.spin_once(reader, timeout_sec=1)
        
        else:
            print("Timeout: No data received within 5 seconds")
            
    except KeyboardInterrupt:
        print("\nInterrupted by user")
    finally:
        reader.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()